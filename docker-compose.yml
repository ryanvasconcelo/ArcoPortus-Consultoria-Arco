version: '3.9'

services:
  # --- Serviço Banco de Dados PostgreSQL ---
  arcoportus_db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: arcoportus_db
      POSTGRES_USER_FILE: /run/secrets/arcoportus_db_user
      POSTGRES_PASSWORD_FILE: /run/secrets/arcoportus_db_password
    volumes:
      - arcoportus_postgres_data:/var/lib/postgresql/data
    secrets:
      - arcoportus_db_user
      - arcoportus_db_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/arcoportus_db_user) -d arcoportus_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - ProjecontNet
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  # --- Serviço Backend (Arco Portus API) ---
  backend:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - /opt/arcoportus/backend:/app
    environment:
      DB_NAME: arcoportus_db
      CORS_ORIGIN: https://arcoportus.pktech.ai
      NODE_ENV: production
      PORT: 3335
      CGA_INTERNAL_API_URL: http://backend:3333/api
      INTERNAL_API_KEY: NDQBFansjdnqfbquwb1237asud1ngjnJAFWJNFjnaisf9283nfjNFnfjqnfbsu91293JNDjNDQWBFUBWjqwufbasjnjncw98124012.1e209eqsjcanjn
    secrets:
      - arcoportus_db_user
      - arcoportus_db_password
      - arcoportus_jwt_secret
    command:
      - sh
      - -c
      - |
        echo 'Aguardando banco de dados...'
        until nc -z arcoportus_db 5432; do
          echo 'Banco ainda não está pronto...'
          sleep 2
        done
        echo 'Banco está pronto!'
        
        DB_USER_VAL=$$(cat /run/secrets/arcoportus_db_user)
        DB_PASSWORD_VAL=$$(cat /run/secrets/arcoportus_db_password)
        export DATABASE_URL="postgresql://$${DB_USER_VAL}:$${DB_PASSWORD_VAL}@arcoportus_db:5432/$${DB_NAME}?schema=public"
        export ARCO_PORTUS_JWT_SECRET=$$(cat /run/secrets/arcoportus_jwt_secret)
        
        echo 'Limpando artefatos e instalando dependências...'
        rm -rf node_modules dist
        npm install
        
        echo 'Executando migrations...'
        npx prisma migrate deploy
        
        echo 'Gerando Prisma Client...'
        npx prisma generate
        
        echo 'Compilando TypeScript...'
        npm run build
        
        echo 'Iniciando aplicação (Produção)...'
        npm run start -- --host 0.0.0.0
    networks:
      - ProjecontNet
    depends_on:
      - arcoportus_db
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        traefik.enable: "true"
        traefik.http.routers.arcoportus-backend.rule: "Host(`arcoportus.pktech.ai`) && PathPrefix(`/api`)"
        traefik.http.routers.arcoportus-backend.entrypoints: "websecure"
        traefik.http.routers.arcoportus-backend.tls.certresolver: "letsencryptresolver"
        traefik.http.routers.arcoportus-backend.middlewares: "stripprefix-api@docker"
        traefik.http.services.arcoportus-backend.loadbalancer.server.port: "3335"
        traefik.docker.network: "ProjecontNet"
        traefik.http.routers.arcoportus-backend-http.rule: "Host(`arcoportus.pktech.ai`) && PathPrefix(`/api`)"
        traefik.http.routers.arcoportus-backend-http.entrypoints: "web"
        traefik.http.routers.arcoportus-backend-http.middlewares: "redirect-to-https@docker"
        traefik.http.middlewares.stripprefix-api.stripprefix.prefixes: "/api"

  # --- Serviço Frontend (Arco Portus UI) ---
  frontend:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - /opt/arcoportus/frontend:/app
    environment:
      VITE_API_BASE_URL: https://arcoportus.pktech.ai/api
    command:
      - sh
      - -c
      - |
        echo 'Limpando artefatos e instalando dependências do frontend...'
        rm -rf node_modules dist
        
        echo 'Instalando dependências (com workaround para Alpine)...'
        npm install --no-optional
        npm install @rollup/rollup-linux-x64-musl --save-optional
        
        echo 'Iniciando build e servidor de preview (Frontend)...'
        npm run build
        npm run preview -- --host 0.0.0.0 --port 5174
    networks:
      - ProjecontNet
    depends_on:
      - backend
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        traefik.enable: "true"
        traefik.http.routers.arcoportus-frontend.rule: "Host(`arcoportus.pktech.ai`)"
        traefik.http.routers.arcoportus-frontend.entrypoints: "websecure"
        traefik.http.routers.arcoportus-frontend.tls.certresolver: "letsencryptresolver"
        traefik.http.services.arcoportus-frontend.loadbalancer.server.port: "5174"
        traefik.docker.network: "ProjecontNet"
        traefik.http.routers.arcoportus-frontend-http.rule: "Host(`arcoportus.pktech.ai`)"
        traefik.http.routers.arcoportus-frontend-http.entrypoints: "web"
        traefik.http.routers.arcoportus-frontend-http.middlewares: "redirect-to-https@docker"
        traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: "https"
        traefik.http.middlewares.redirect-to-https.redirectscheme.permanent: "true"

# --- Recursos Externos ---
volumes:
  arcoportus_postgres_data:
    name: arcoportus_postgres_data
    external: true

secrets:
  arcoportus_db_user:
    external: true
  arcoportus_db_password:
    external: true
  arcoportus_jwt_secret:
    external: true

networks:
  ProjecontNet:
    external: true